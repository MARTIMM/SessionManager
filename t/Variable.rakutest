use v6.d;

use Test;
use Desktop::Dispatcher::Variable;

my Desktop::Dispatcher::Variable $v .= instance;


lives-ok
  { $v.add( %(
    :v1('test var 1'),
    :v2('replace $v1')
  ))
  }, 'add var 1 and 2';

is $v.substitute-vars('line with $v1'),
   'line with test var 1',
   'var $v1 substituted';

is $v.substitute-vars('line with $v2'),
   'line with replace test var 1',
   'var $v2 substituted';

is $v.substitute-vars('line with $v3'),
   'line with $v3',
   'var $v3 not substituted';


lives-ok
  { $v.add( %(
    :v1('test new var 1'),
    :v3('var 3 with $v1')
  ))
  }, 'replace var 1 and add var 3';

is $v.substitute-vars('line with $v3'),
   'line with var 3 with test new var 1',
   'var $v3 substituted';

is $v.substitute-vars('line with $v4'),
   'line with $v4',
   'var $v4 not substituted';


lives-ok
  { $v.set-temporary( %(
    :t1('temp 1')
  ))
  }, 'Set temp variable t1';

is $v.substitute-vars('line with $t1'),
   'line with temp 1',
   'substitution from temp vars';

lives-ok
  { $v.set-temporary( %(
    :t2('temp 2')
  ))
  }, 'Set temp variable t2';

is $v.substitute-vars('line with $t1'),
   'line with $t1',
   't1 not in temporary vars anymore';


is $v.substitute-vars('line with $e1'),
   'line with $e1',
   'var $e1 not substituted';

%*ENV<e1> = 'e1 from environment';

is $v.substitute-vars('line with $e1'),
   'line with e1 from environment',
   'var $e1 from environment';

done-testing;

=finish

use v6.d;

use Test;
use Desktop::Dispatcher::Variables;
use Desktop::Dispatcher::ActionData;

use Digest::SHA256::Native;

#-------------------------------------------------------------------------------
my Desktop::Dispatcher::Variables $v .= instance;

#-------------------------------------------------------------------------------
my Desktop::Dispatcher::ActionData $ad;

$v.add( %(
    :home</home/marcel>,
    :icons1('$home/Sessions/Images/Archive')
  )
);

lives-ok
  {
    $ad .= new(
      :raw-action( %(
          :t('Firefox Browser'),
          :c<firefox>,
          :o<$icons1/firefox.jpg>,
          :i<$icons1/icon.png>,
        )
      )
    );
  }, "Create action data";

is $ad.id, sha256-hex('Firefox Browser'), 'generated id';
is $ad.picture, '/home/marcel/Sessions/Images/Archive/icon.png', "picture";
is $ad.overlay-picture, '/home/marcel/Sessions/Images/Archive/firefox.jpg',
   "overlay picture";


lives-ok
  {
    $ad .= new(
      :id<hoeperdepoep>,
      :raw-action( %(
          :t('Firefox Browser'),
          :c<firefox>,
          :o<$icons1/firefox.jpg>,
          :i<$icons1/icon.png>,
        )
      )
    );
  }, "Create another action data";

is $ad.id, 'hoeperdepoep', 'id from argument';


lives-ok
  {
    $ad .= new(
      :id<hoeperdepoep>,
      :raw-action( %(
          :t('Firefox Browser'),
          :c<firefox>,
          :o<$icons1/firefox.jpg>,
          :i<$icons1/icon.png>,
          :id<firefox>,
        )
      )
    );
  }, "Create another action data";

is $ad.id, 'firefox', 'id from raw hash';

ok !$ad.run-in-group, 'Will not run with group';
$ad.set-run-in-group(True);
ok $ad.run-in-group, 'Will run with group';


lives-ok
  {
    $ad .= new(
      :raw-action( %(
          :t('Run test'),
          :c('ls /usr/bin/ls'),
        )
      )
    );
  }, "Create ls action";

$ad.set-shell('/usr/bin/sh');
$ad.run-action;
while $ad.running {
  $*ERR.print('.');
  $*ERR.flush;
  sleep 0.5;
}
like $ad.run-log, /'Program started ok, Pid: ' \d+ /, 'run ok';
is $ad.run-error, '', 'no errors';



lives-ok
  {
    $ad .= new(
      :raw-action( %(
          :t('Run test'),
          :c('sleep 4'),
        )
      )
    );
  }, "Create sleep action";

$ad.set-shell('/usr/bin/bash');
$ad.run-action;
while $ad.running {
  $*ERR.print($ad.get-new-log-lines);
  $*ERR.flush;
  sleep 0.5;
}
like $ad.run-log, /'Program started ok, Pid: ' \d+ /, 'run ok';
is $ad.run-error, '', 'no errors';


#-------------------------------------------------------------------------------
done-testing;

=finish
